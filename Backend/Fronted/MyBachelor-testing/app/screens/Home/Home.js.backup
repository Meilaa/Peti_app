import React, { useState, useEffect } from 'react';
import { Modal, View, Text, Image, StyleSheet, TouchableOpacity, Pressable, ActivityIndicator } from 'react-native';
import FontAwesome6 from '@expo/vector-icons/FontAwesome6';
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { useNavigation } from '@react-navigation/native';
import MapView, { Marker } from 'react-native-maps';
import DogImage from '../../../assets/images/dog_pics.png';
import Hybrid from '../../../assets/images/Hybrid.png';
import Standard from '../../../assets/images/Standard.png';
import Satellite from '../../../assets/images/Satellite.png';
import colors from '../../constants/colors';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import environments from '../../constants/enviroments';
import AsyncStorage from '@react-native-async-storage/async-storage';

const DogWalkingApp = () => {
  const navigation = useNavigation();
  const [mapType, setMapType] = useState('standard');
  const [currentLocationIndex, setCurrentLocationIndex] = useState(0);
  const [viewAll, setViewAll] = useState(false);
  const [locations, setLocations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [mapSettingsVisible, setMapSettingsVisible] = useState(false);

  const getToken = async () => {
    try {
      const token = await AsyncStorage.getItem('authToken');
      return token;
    } catch (error) {
      console.error('Error retrieving token:', error);
      return null;
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      await fetchDeviceData();
    };

    fetchData();

    const intervalId = setInterval(fetchData, 5000);

    return () => clearInterval(intervalId);
  }, []);

  const fetchDeviceData = async () => {
    try {
      const token = await getToken();
      if (!token) {
        throw new Error('No token found');
      }

      const response = await fetch(`${environments.API_BASE_URL}/api/deviceData`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.length === 0) {
        setLocations([{
          id: '0',
          latitude: 54.6892,
          longitude: 25.2798,
          animalName: 'No animals found',
          battery: 'N/A',
          status: 'Offline',
          object_id: 'none',
          isOffline: true,
        }]);
        setLoading(false);
        return;
      }

      const formattedLocations = data.map(device => {
        // Always use animal name if available, fallback to device name
        const animalName = device.animalName && device.animalName !== 'Device is offline' && device.animalName !== 'Unknown Animal'
          ? device.animalName 
          : device.deviceName || 'Unknown Animal';
        
        // Determine if device is offline
        const isOffline = !device.gnssStatus;
        
        return {
          id: device._id,
          latitude: device.positionLatitude,
          longitude: device.positionLongitude,
          animalName: animalName,
          battery: device.batteryLevel || 'N/A',
          status: isOffline ? 'Offline' : 'Online',
          object_id: device.object_id || 'none',
          isOffline: isOffline,
        };
      });

      // Filter out duplicate locations
      const uniqueLocations = [];
      formattedLocations.forEach(device => {
        const existingDevice = uniqueLocations.find(
          location =>
            location.latitude === device.latitude && location.longitude === device.longitude && 
            location.object_id === device.object_id
        );
        if (!existingDevice) {
          uniqueLocations.push(device);
        }
      });

      setLocations(uniqueLocations);

      if (uniqueLocations.length > 0) {
        // Keep current index if possible, otherwise reset to 0
        if (currentLocationIndex >= uniqueLocations.length) {
          setCurrentLocationIndex(0);
        }
      } else {
        setLocations([{
          id: '0',
          latitude: 54.6892,
          longitude: 25.2798,
          animalName: 'No animals found',
          battery: 'N/A',
          status: 'Offline',
          object_id: 'none',
          isOffline: true,
        }]);
      }

      setLoading(false);
    } catch (error) {
      console.error('Error fetching device data:', error);
      setLoading(false);
      setLocations([{
        id: '0',
        latitude: 54.6892,
        longitude: 25.2798,
        animalName: 'No animals found',
        battery: 'N/A',
        status: 'Offline',
        object_id: 'none',
        isOffline: true,
      }]);
    }
  };

  const changeMapType = (type) => {
    setMapType(type);
    setMapSettingsVisible(false);
  };

  const currentLocation = locations[currentLocationIndex] || {
    latitude: 54.6892,
    longitude: 25.2798,
    animalName: 'No animals found',
    battery: 'N/A',
    status: 'Offline',
    object_id: 'none',
    isOffline: true,
  };

  const toggleViewAll = () => {
    setViewAll(prev => !prev);
  };

  const goToPreviousAnimal = () => {
    if (currentLocationIndex > 0) {
      setCurrentLocationIndex(currentLocationIndex - 1);
    }
  };

  const goToNextAnimal = () => {
    if (currentLocationIndex < locations.length - 1) {
      setCurrentLocationIndex(currentLocationIndex + 1);
    }
  };

  // Fixed navigation function
  const navigateToDevicePage = (device) => {
    if (device && device.id !== '0') {
      // Check if the Device screen exists in the navigation stack
      try {
        // Use the correct screen name (likely "Device" instead of "DeviceDetails")
        navigation.navigate('Device', { deviceId: device.id });
      } catch (error) {
        console.error('Navigation error:', error);
        // Fallback to another screen if DeviceDetails doesn't exist
        try {
          navigation.navigate('Home');
        } catch (e) {
          console.error('Failed to navigate to fallback screen:', e);
        }
      }
    }
  };

  if (loading) {
    return <ActivityIndicator size="large" color={colors.yellow} />;
  }

  // Get current animal's battery level and status
  const currentBatteryLevel = currentLocation?.battery || 'N/A';
  const currentConnectionStatus = currentLocation?.status || 'Offline';

  // Determine map region
  const mapRegion = viewAll 
    ? getMapRegionForAllLocations(locations)
    : {
        latitude: currentLocation?.latitude || 54.6892,
        longitude: currentLocation?.longitude || 25.2798,
        latitudeDelta: 0.02,
        longitudeDelta: 0.02,
      };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <View style={styles.titleContainer}>
          <Image source={DogImage} style={styles.dogIcon} />
          <Text style={styles.title}>{viewAll ? 'All Animals' : currentLocation?.animalName}</Text>
        </View>
        <View style={styles.statusIcons}>
          <View style={styles.statusIconsRow}>
            <FontAwesome6 
              name="wifi" 
              size={20} 
              color={currentConnectionStatus === 'Online' ? colors.yellow : colors.gray} 
            />
            <Text style={styles.statusText}>{viewAll ? '' : currentConnectionStatus}</Text>
          </View>
          <View style={styles.statusIconsRow}>
            <FontAwesome6 
              name="battery-full" 
              size={20} 
              color={currentBatteryLevel !== 'N/A' ? colors.yellow : colors.gray} 
            />
            <Text style={styles.statusText}>{viewAll ? '' : currentBatteryLevel}%</Text>
          </View>
        </View>
      </View>

      <View style={styles.mapContainer}>
        <MapView
          style={styles.map}
          region={mapRegion}
          mapType={mapType}
        >
          {viewAll
            ? locations.map((location) => (
                <Marker
                  key={location.id}
                  coordinate={{ latitude: location.latitude, longitude: location.longitude }}
                  title={location.animalName}
                  description={location.status}
                  pinColor={colors.yellow} // Always use yellow for consistency
                  onPress={() => navigateToDevicePage(location)}
                />
              ))
            : (
                <Marker
                  key={currentLocation?.id}
                  coordinate={{ latitude: currentLocation?.latitude, longitude: currentLocation?.longitude }}
                  title={currentLocation?.animalName}
                  description={currentLocation?.status}
                  pinColor={colors.yellow} // Always use yellow for consistency
                  onPress={() => navigateToDevicePage(currentLocation)}
                />
              )}
        </MapView>

        <TouchableOpacity style={styles.mapButton} onPress={() => setMapSettingsVisible(true)}>
          <FontAwesome6 name="map" size={20} color={colors.white} />
        </TouchableOpacity>
      </View>

      <View style={styles.navigationButtons}>
        {!viewAll && (
          <TouchableOpacity 
            style={[styles.arrowButton, currentLocationIndex === 0 && styles.disabledButton]} 
            onPress={goToPreviousAnimal} 
            disabled={currentLocationIndex === 0}
          >
            <MaterialIcons name="arrow-back-ios-new" size={20} color={currentLocationIndex === 0 ? colors.gray : colors.yellow} />
          </TouchableOpacity>
        )}
        
        <TouchableOpacity style={styles.walkButton} onPress={toggleViewAll}>
          <Text style={styles.walkButtonText}>{viewAll ? 'View Single Animal' : 'View All Animals'}</Text>
        </TouchableOpacity>
        
        {!viewAll && (
          <TouchableOpacity 
            style={[styles.arrowButton, currentLocationIndex === locations.length - 1 && styles.disabledButton]} 
            onPress={goToNextAnimal} 
            disabled={currentLocationIndex === locations.length - 1}
          >
            <MaterialIcons name="arrow-forward-ios" size={20} color={currentLocationIndex === locations.length - 1 ? colors.gray : colors.yellow} />
          </TouchableOpacity>
        )}
      </View>

      {!viewAll && locations.length > 1 && (
        <View style={styles.paginationIndicator}>
          {locations.map((_, index) => (
            <View 
              key={index} 
              style={[
                styles.paginationDot, 
                index === currentLocationIndex && styles.activePaginationDot
              ]} 
            />
          ))}
        </View>
      )}

      <Modal animationType="fade" transparent={true} visible={mapSettingsVisible} onRequestClose={() => setMapSettingsVisible(false)}>
        <View style={styles.modalBackground}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Map Settings</Text>
              <Pressable onPress={() => setMapSettingsVisible(false)} style={styles.closeButton}>
                <FontAwesome name="close" size={20} color={colors.yellow} />
              </Pressable>
            </View>
            <View style={styles.modalBody}>
              <Text style={styles.modalText}>Control what you see on the map</Text>
              <View style={styles.modalContainer}>
                <Pressable style={styles.mapTypeButton} onPress={() => changeMapType('standard')}>
                  <Image source={Standard} style={styles.mapPictures} />
                  <Text style={styles.mapTypeText}>Standard</Text>
                </Pressable>
                <Pressable style={styles.mapTypeButton} onPress={() => changeMapType('satellite')}>
                  <Image source={Satellite} style={styles.mapPictures} />
                  <Text style={styles.mapTypeText}>Satellite</Text>
                </Pressable>
                <Pressable style={styles.mapTypeButton} onPress={() => changeMapType('hybrid')}>
                  <Image source={Hybrid} style={styles.mapPictures} />
                  <Text style={styles.mapTypeText}>Hybrid</Text>
                </Pressable>
              </View>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
};

// Helper function to calculate appropriate map region when showing all locations
const getMapRegionForAllLocations = (locations) => {
  if (!locations || locations.length === 0) {
    return {
      latitude: 54.6892,
      longitude: 25.2798,
      latitudeDelta: 0.05,
      longitudeDelta: 0.05,
    };
  }

  // Find min and max latitude/longitude to encompass all points
  let minLat = locations[0].latitude;
  let maxLat = locations[0].latitude;
  let minLng = locations[0].longitude;
  let maxLng = locations[0].longitude;

  locations.forEach(loc => {
    minLat = Math.min(minLat, loc.latitude);
    maxLat = Math.max(maxLat, loc.latitude);
    minLng = Math.min(minLng, loc.longitude);
    maxLng = Math.max(maxLng, loc.longitude);
  });

  // Calculate center point
  const centerLat = (minLat + maxLat) / 2;
  const centerLng = (minLng + maxLng) / 2;

  // Calculate appropriate deltas with padding
  const latDelta = (maxLat - minLat) * 1.5 || 0.05;
  const lngDelta = (maxLng - minLng) * 1.5 || 0.05;

  return {
    latitude: centerLat,
    longitude: centerLng,
    latitudeDelta: Math.max(0.01, latDelta),
    longitudeDelta: Math.max(0.01, lngDelta),
  };
};


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.white,
    alignItems: 'center',
    justifyContent: 'flex-end',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  titleContainer: {
    flexDirection: 'row',
    gap: 8,
    alignItems: 'center',
  },
  statusIconsRow: {
    alignItems: 'center',
    marginLeft: 10,
  },
  dogIcon: { width: 30, height: 40, marginLeft: 8 },
  title: { fontSize: 20, fontWeight: '600', marginLeft: 5 },
  statusIcons: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  statusText: { fontSize: 12, textAlign: 'center' },
  mapContainer: {
    position: 'relative',
    width: '100%',
    height: '75%',
    borderRadius: 10,
  },
  map: { flex: 1 },
  mapButton: {
    position: 'absolute',
    bottom: 10,
    right: 10,
    backgroundColor: colors.yellow,
    padding: 10,
    borderRadius: 50,
    zIndex: 1,
    borderColor: colors.black,
    borderWidth: 1,
  },
  address: { fontSize: 18, marginTop: 10, fontWeight: '600' },
  walkButton: {
    borderColor: colors.black,
    borderWidth: 1,
    backgroundColor: colors.yellow,
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 50,
    alignSelf: 'center',
    marginHorizontal: 15,
    width: '60%',
  },
  walkButtonText: { fontSize: 16, fontWeight: '600', textAlign: 'center', marginBottom: 1 },

  // Modal Styles
  modalBackground: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: colors.yellow,
    borderRadius: 10,
    padding: 5,
    marginVertical: 10,
    paddingHorizontal: 10,
  },
  modalContent: {
    width: '90%',
    backgroundColor: colors.white,
    borderRadius: 16,
    padding: 16,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 5,
    position: 'relative',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: colors.black,
    textAlign: 'center',
  },
  closeButton: {
    position: 'absolute',
    right: 0,
  },
  modalBody: {
    marginTop: 10,
  },
  modalText: {
    fontSize: 16,
    color: colors.black,
    textAlign: 'center',
  },
  mapPictures: {
    width: 70,
    height: 70,
    borderRadius: 50,
    borderWidth: 1,
    borderColor: colors.black,
  },
  mapTypeButton: {
    backgroundColor: colors.lightGray,
    borderRadius: 8,
    marginVertical: 10,
  },
  mapTypeText: {
    fontSize: 16,
    color: colors.black,
    textAlign: 'center',
    fontWeight: '600',
    marginBottom: 5,
  },
  navigationButtons: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: '100%',
    marginBottom: 20,
    marginTop: 15,
  },
  arrowButton: {
    justifyContent: 'center',
    alignItems: 'center',
    width: 40,
    height: 40,
  },
  markerContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    paddingVertical: 5,
  },
  markerLabel: {
    fontSize: 12,
    fontWeight: 'bold',
    color: colors.black,
    textAlign: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    overflow: 'hidden',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.3,
    shadowRadius: 2,
  },
});

export default DogWalkingApp;